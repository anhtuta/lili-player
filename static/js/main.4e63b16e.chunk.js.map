{"version":3,"sources":["service/UtilService.js","context/LiliContext.jsx","components/Loadable/LoadingIcon.js","components/Loadable/Loadable.js","App.js","serviceWorker.js","index.js","constants/Constants.js"],"names":["getById","id","document","getElementById","getByClass","className","getElementsByClassName","myParseFloat","num","parseFloat","toFixed","decodeTime","timestamp","results","match","length","parseInt","createNewElement","tagName","classList","attributes","ele","createElement","setAttribute","i","Object","keys","saveSetting","key","value","settings","localStorage","getItem","JSON","parse","setItem","stringify","getSetting","filterTable","tableId","column","searchText","filter","tr","td","toUpperCase","getElementsByTagName","textContent","innerText","indexOf","style","display","shuffle","array","randomIndex","currentIndex","Math","floor","random","getAbsoluteUrl","uri","startsWith","process","isValidDate","d","Date","isNaN","formatDateMY","toLocaleDateString","year","month","defaultValues","theme","THEME_LIGHT","setTheme","LiliContext","React","createContext","LiliProvider","children","useState","useEffect","storedTheme","SETTING_APP_THEME","Provider","updateTheme","t","LoadingIcon","props","show","fullscreen","Loading","error","onClick","retry","timedOut","pastDelay","Nav","loadable","fallback","About","BaiHat","NotFound","App","state","userInfo","this","exact","path","to","component","Loadable","Component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message","ACCESS_TOKEN","ROLES","MENU_ITEMS","name","level","enabled","subItems","ROLE_TABLE","SEQUENCE","SHUFFLE","REPEAT_ONE","NO_LYRIC","FETCHING_LYRIC","LYRIC_NOT_FOUND","THEME_DARK"],"mappings":"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","file":"static/js/main.4e63b16e.chunk.js","sourcesContent":["const LILIANA_SETTINGS = 'LILIANA_SETTINGS';\n\nexport function getById(id) {\n  return document.getElementById(id);\n}\nexport function getByClass(className) {\n  return document.getElementsByClassName(className)[0];\n}\n/**\n * VD: num = parseFloat(\"42.318\")+100\n * kết quả sẽ ra là num = 142.31799999999998, chứ ko phải 142.318\n * do đó cần convert num thành số có 3 chữ số sau dấu phẩy (3 decimal places)\n **/\nexport function myParseFloat(num) {\n  return parseFloat(num.toFixed(3));\n}\n\n/**\n * Convert time stamp to seconds\n * @param {string} timestamp Lyrics time stamp, in format [2:17.88] or [1:03:45.32]\n * @return {number} Time in seconds, float number\n * Reference: https://github.com/guoyunhe/rabbit-lyrics/blob/master/src/index.js\n */\nexport function decodeTime(timestamp) {\n  if (!timestamp || typeof timestamp !== 'string') return 0;\n  let results;\n\n  // [hh:mm:ss.xx] format, used by some long audio books\n  results = timestamp.match(/\\[(\\d+):(\\d+):(\\d+\\.\\d+)\\]/);\n  if (results && results.length === 4) {\n    return parseFloat((parseInt(results[1]) * 60 * 60 + parseInt(results[2]) * 60 + parseFloat(results[3])).toFixed(3));\n  }\n\n  // [mm:ss.xx] format, widely used for songs\n  // chú ý: regex này có 2 group: (\\d+) và (\\d+\\.\\d+)\n  // do đó results sẽ là 1 mảng chứa 2 group này\n  results = timestamp.match(/\\[(\\d+):(\\d+\\.\\d+)\\]/);\n  if (results && results.length === 3) {\n    return parseFloat((parseInt(results[1]) * 60 + parseFloat(results[2])).toFixed(3));\n  }\n\n  return 0;\n}\n\n/**\n * create and return new element\n * @param {string} tagName type of tag to create (ex: div, span, h1...)\n * @param {string} id id of tag\n * @param {string} classList list of classes for this tag\n * @param {JSON} attributes list of attribute this tag\n * @return {HTMLElement} element that be created\n **/\nexport function createNewElement(tagName, id, classList, attributes = null) {\n  let ele = document.createElement(tagName);\n\n  if (id && typeof id === 'string') {\n    ele.setAttribute('id', id);\n  }\n  if (classList && typeof classList === 'string') {\n    ele.setAttribute('class', classList);\n  }\n  if (attributes && typeof attributes === 'object') {\n    for (let i = 0; i < Object.keys(attributes).length; i++) {\n      ele.setAttribute(Object.keys(attributes)[i], attributes[Object.keys(attributes)[i]]);\n    }\n  }\n\n  return ele;\n}\n\n/**\n * save setting to local storage\n */\nexport function saveSetting(key, value) {\n  let settings;\n  if (localStorage && localStorage.getItem(LILIANA_SETTINGS)) {\n    settings = JSON.parse(localStorage.getItem(LILIANA_SETTINGS));\n    settings[key] = value;\n  } else {\n    settings = {\n      [key]: value\n    };\n  }\n  localStorage.setItem('LILIANA_SETTINGS', JSON.stringify(settings));\n}\n\n/**\n * get setting from local storage\n */\nexport function getSetting(key) {\n  if (localStorage && localStorage.getItem(LILIANA_SETTINGS)) {\n    let settings = JSON.parse(localStorage.getItem(LILIANA_SETTINGS));\n    return settings[key];\n  }\n  return null;\n}\n\n/**\n * Filter table\n * @param {string} tableId ID of table\n * @param {integer} column The position of column we want to filter table on (first column = 0)\n * @param {string} searchText Text for filtering\n */\nexport function filterTable(tableId, column, searchText) {\n  var filter, table, tr, td, i, txtValue;\n  filter = searchText.toUpperCase();\n  table = document.getElementById(tableId);\n  tr = table.getElementsByTagName('tr');\n  for (i = 0; i < tr.length; i++) {\n    td = tr[i].getElementsByTagName('td')[column];\n    if (td) {\n      txtValue = td.textContent || td.innerText;\n      if (txtValue.toUpperCase().indexOf(filter) > -1) {\n        tr[i].style.display = '';\n      } else {\n        tr[i].style.display = 'none';\n      }\n    }\n  }\n}\n\nexport function shuffle(array) {\n  let currentIndex = array.length,\n    randomIndex;\n\n  // While there remain elements to shuffle...\n  while (currentIndex !== 0) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex--;\n\n    // And swap it with the current element.\n    [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n  }\n\n  return array;\n}\n\nexport const getAbsoluteUrl = (uri) => {\n  if (uri.startsWith('http')) return uri;\n  return process.env.REACT_APP_HOST_API + uri;\n};\n\n/**\n * Check if a date is valid\n * @param {Date} d date to check\n * @returns {boolean}\n */\nexport const isValidDate = (d) => {\n  return d instanceof Date && !isNaN(d);\n};\n\n/**\n * Format date: m/yyyy. Ref: https://stackoverflow.com/a/34015511/7688028\n * @param {Date} d date to format\n * @returns {string}\n */\nexport const formatDateMY = (d) => {\n  const options = { year: 'numeric', month: 'numeric' };\n  return d.toLocaleDateString('vi-VN', options);\n};\n","import React, { useState, useEffect } from 'react';\nimport { SETTING_APP_THEME, THEME_LIGHT } from '../constants/Constants';\nimport { saveSetting, getSetting } from '../service/UtilService';\n\nconst defaultValues = {\n  theme: THEME_LIGHT,\n  setTheme: () => {}\n};\n\nexport const LiliContext = React.createContext(defaultValues);\n\nexport const LiliProvider = ({ children }) => {\n  const [theme, setTheme] = useState(THEME_LIGHT);\n\n  // Update theme from local storage\n  useEffect(() => {\n    const storedTheme = getSetting(SETTING_APP_THEME);\n    if (storedTheme) {\n      setTheme(storedTheme);\n    } else {\n      setTheme(THEME_LIGHT);\n    }\n  }, []); // similar to componentDidMount\n\n  const updateTheme = (t = THEME_LIGHT) => {\n    setTheme(t);\n    saveSetting(SETTING_APP_THEME, t);\n  };\n\n  return (\n    <LiliContext.Provider\n      value={{\n        theme,\n        updateTheme\n      }}\n    >\n      {children}\n    </LiliContext.Provider>\n  );\n};\n","import React from 'react';\nimport './LoadingIcon.scss';\n\n/**\n * Ref: https://loading.io/css/\n */\nconst LoadingIcon = (props) => {\n  const { show, fullscreen = true } = props;\n  const className = fullscreen ? 'loading-fs' : '';\n  return show ? (\n    <div className={className}>\n      <div className=\"lds-ring\">\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n      </div>\n    </div>\n  ) : null;\n};\n\nexport default LoadingIcon;\n","import React from 'react';\nimport loadable from '@loadable/component';\nimport LoadingIcon from './LoadingIcon';\n\nconst Loading = (props) => {\n  if (props.error) {\n    return (\n      <div>\n        Error! <button onClick={props.retry}>Retry</button>\n      </div>\n    );\n  } else if (props.timedOut) {\n    return (\n      <div>\n        Taking a long time... <button onClick={props.retry}>Retry</button>\n      </div>\n    );\n  } else if (props.pastDelay) {\n    return <LoadingIcon show={true} />;\n  } else {\n    return null;\n  }\n};\n\n// Using Loadable is simple. All you need to do is pass in a function which loads\n// your component and a \"Loading\" component to show while your component loads.\nexport const Nav = loadable(() => import('../../components/Nav/Nav'), {\n  fallback: Loading({\n    pastDelay: true,\n    error: false,\n    timedOut: false\n  })\n});\n\nexport const About = loadable(() => import('../../pages/About/About'), {\n  fallback: Loading({\n    pastDelay: true,\n    error: false,\n    timedOut: false\n  })\n});\n\nexport const BaiHat = loadable(() => import('../../pages/BaiHat/BaiHat'), {\n  fallback: Loading({\n    pastDelay: true,\n    error: false,\n    timedOut: false\n  })\n});\n\nexport const Login = loadable(() => import('../../pages/Login/Login'), {\n  fallback: Loading({\n    pastDelay: true,\n    error: false,\n    timedOut: false\n  })\n});\n\nexport const NotFound = loadable(() => import('../../pages/NotFound/NotFound'), {\n  fallback: Loading({\n    pastDelay: true,\n    error: false,\n    timedOut: false\n  })\n});\n","import React, { Component } from 'react';\nimport { HashRouter, Route, Switch, Redirect } from 'react-router-dom';\nimport { ToastContainer } from 'react-toastify';\nimport * as Loadable from './components/Loadable/Loadable';\nimport { LiliProvider } from './context/LiliContext';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userInfo: null\n    };\n  }\n\n  render() {\n    const { userInfo } = this.state;\n    return (\n      <HashRouter>\n        <LiliProvider>\n          <div className=\"app\">\n            <Loadable.Nav userInfo={userInfo} />\n            <div className=\"app-content\">\n              <Switch>\n                <Route exact path=\"/\">\n                  <Redirect to=\"/bai-hat\" />\n                </Route>\n                <Route exact path=\"/bai-hat\" component={Loadable.BaiHat} />\n                <Route exact path=\"/bai-hat/:id\" component={Loadable.BaiHat} />\n                <Route exact path=\"/about\" component={Loadable.About} />\n                <Route path=\"\" component={Loadable.NotFound} />\n              </Switch>\n            </div>\n          </div>\n        </LiliProvider>\n        <ToastContainer />\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'font-awesome/css/font-awesome.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const ACCESS_TOKEN = 'access_token';\n\nexport const ACTION_ADD = 'ADD';\nexport const ACTION_EDIT = 'EDIT';\n\nexport const ROLES = {\n  ROLE_USER: 'USER',\n  ROLE_ADMIN: 'ADMIN',\n  ROLE_STORE_MANAGER: 'STORE_MANAGER',\n  ROLE_BOOK_MANAGER: 'BOOK_MANAGER'\n};\n\nexport const MENU_ITEMS = [\n  {\n    name: 'Lili Player',\n    path: '/bai-hat',\n    key: 'home',\n    level: 1,\n    enabled: true,\n    subItems: null\n  },\n  {\n    name: 'About',\n    path: '/about',\n    key: 'about',\n    level: 1,\n    enabled: true,\n    subItems: null\n  }\n];\n\n// Những URL nào ko có trong này là public URL, role nào cũng access được\nexport const ROLE_TABLE = {\n  '/book': [ROLES.ROLE_USER],\n  '/staff': [ROLES.ROLE_STORE_MANAGER],\n  '/fetch-demo': [ROLES.ROLE_USER]\n};\n\nexport const STAFF_ALIVE = 1;\nexport const STAFF_DEAD = 0;\n\nexport const GENDERS = {\n  MALE: 'male',\n  FEMALE: 'female',\n  GAY: 'gay',\n  LESBIAN: 'lesbian',\n  UNKNOWN: 'unknown'\n};\n\nexport const LILIANA_SETTINGS = 'LILIANA_SETTINGS';\nexport const SETTING_APP_THEME = 'appTheme';\n\nexport const SEQUENCE = 'SEQUENCE';\nexport const SHUFFLE = 'SHUFFLE';\nexport const REPEAT_ONE = 'REPEAT_ONE';\nexport const playTypeList = [SEQUENCE, SHUFFLE, REPEAT_ONE];\nexport const playTypeCssList = ['fa-long-arrow-right', 'fa-random', 'fa-repeat'];\nexport const playTypeTitleList = ['Sequence', 'Shuffle', 'Repeat one'];\n// export const playTypeSvgList = [BTN_SEQUENCE_SVG, BTN_SHUFFLE_SVG, BTN_REPEAT_ONE_SVG];\nexport const NO_LYRIC = `Sorry! This song has no lyric yet! You can contribute lyric by\n  sending it to me:<br/><a href='mailto:taanhtu95@gmail.com'>Mail</a><br/>\n  <a href='https://fb.com/anhtuta95' target='_blank'>FB</a>`;\nexport const FETCHING_LYRIC = 'Fetching lyric, please wait...';\nexport const LYRIC_NOT_FOUND = \"Lyric doesn't exist!\";\n\nexport const THEME_LIGHT = 'light';\nexport const THEME_DARK = 'dark';\n"],"sourceRoot":""}